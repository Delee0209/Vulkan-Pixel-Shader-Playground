#version 460
#extension GL_EXT_debug_printf : require

layout(set = 0, binding = 0, rgba8) uniform image2D outputImage;

layout(set = 0, binding = 2) uniform parameters {
    float time;
    vec3 screenDimension;
};

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    // make sure no exceeding thread are execute
    if (any(greaterThanEqual(gl_GlobalInvocationID, screenDimension))) return;

    float separation = ((1.5*cos(time/8.0)+1.0)/2.0) * screenDimension.x;
    if (gl_GlobalInvocationID.x > separation) return;

    vec3 iResolution = screenDimension;
    float iTime = time;
    vec4 O = vec4(0.0,0.0,0.0,1.0);
    vec2 I = vec2(gl_GlobalInvocationID.x, iResolution.y - 1 - gl_GlobalInvocationID.y)+0.5;
    
    float z = 0.0;
    float d = 0.0;
    float i = 0.0;

    for (O *= i; i++ < 20.0; ) {
        vec3 p = z * normalize(vec3(I + I, 0.0) - vec3(iResolution.x, iResolution.y, iResolution.x)) + 0.1;

        // Polar transform
        p = vec3(atan(p.y / 0.2, p.x) * 2.0, p.z / 3.0, length(p.xy) - 5.0 - z * 0.2);

        // Turbulence loop
        d = 0.0;
        for (float j = 0.0; j++ < 7.0; ) {
            p += sin(p.yzx * j + iTime + 0.3 * i) / j;
        }

        z += d = length(vec4(0.4 * cos(p) - 0.4, p.z));

        O += (1.0 + cos(p.x + i * 0.4 + z + vec4(6.0, 1.0, 2.0, 0.0))) / d;
    }

    // Tonemapping
    O = tanh(O * O / 400.0);
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), O);
}